<!DOCTYPE html>
<html>
<head>
    <title>Test Status by Portfolio Item</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Fri Apr 01 2016 08:15:11 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Fri Apr 01 2016 08:15:11 GMT-0600 (MDT)";
        var CHECKSUM = 29149377213;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.ModelExtender',{
    singleton: true,

    build: function(model) {
        var default_fields = [{
            name: '_totalTestCases',
            defaultValue: null,
            displayName: 'Total'
        },{
            name: '_actualTestCases',
            displayName: 'Actual',
            defaultValue: null
        },{
            name: '_plannedTestCases',
            displayName: 'Planned',
            defaultValue: null
        },{
            name: '_passRate',
            displayName: 'Passed',
            defaultValue: null
        }, {
            name: '_testCaseStatus',
            displayName: 'Status',
            defaultValue: null
        }];

        _.each(default_fields, function(df){
            model.addField(df);
        });
        model.addMembers({
            calculate: function(testCases) {

                this.set('_totalTestCases', testCases.length);
                this.set('_actualTestCases', this._getActual(testCases));
                this.set('_plannedTestCases', this._getPlan(testCases));
                this.set('_passRate', this._getPassRate(testCases));
                this.set('_testCaseStatus', this._getStatus(testCases));
            },
            _getActual: function(testCases){
                if (testCases.length > 0){
                    return this._getTestCasesRun(testCases)/testCases.length;
                }
                return 0;
            },
            _getPlan: function(testCases){
                var today = new Date(),
                    startDate = this.get('PlannedStartDate') || this.get('ActualStartDate') || null,
                    endDate = this.get('PlannedEndDate') || this.get('ActualEndDate') || null;
                console.log('_plan', this,startDate, endDate);
                if (startDate && endDate){
                    if (endDate < startDate){
                        var tmp = endDate;
                        endDate = startDate;
                        startDate = tmp;
                    }

                    var totalRange = Rally.util.DateTime.getDifference(endDate, startDate, 'hour'),
                        currentRange = Rally.util.DateTime.getDifference(today, startDate, 'hour');

                    if (today >= startDate && today <= endDate){
                        return totalRange > 0 ? currentRange/totalRange : 0;
                    }

                    if (today > endDate){
                        return 1;
                    }
                    //if none of the above, then today is < start date and planned = 0
                }
                return 0;
            },
            _getTestCasesRun: function(testCases){
                var run = 0;
                _.each(testCases, function(tc){
                    if (tc.get('LastRun')){
                        run++;
                    }
                });
                return run;
            },
            _getPassRate: function(testCases){
                var passed = 0,
                    passVerdicts = ['Pass'],
                    total = testCases.length;

                _.each(testCases, function(tc){
                    if (Ext.Array.contains(passVerdicts, tc.get('LastVerdict'))){
                        passed++;
                    }
                });

                if (total > 0){
                    return passed/total;
                }
                return 0;
            },
            _getStatus: function(testCases){
                // "NONE", "NONE_RUN", "SOME_RUN_SOME_NOT_PASSING", "SOME_RUN_ALL_PASSING", "ALL_RUN_NONE_PASSING", "ALL_RUN_ALL_PASSING"

                var run = 0,
                    passed = 0,
                    total = testCases.length;

                _.each(testCases, function(tc){
                    if (tc.get('LastRun')){
                        run++;
                    }
                    if (tc.get('LastVerdict') === "Pass"){
                        passed++;
                    }
                });

                if (testCases.length === 0) {
                    return "NONE";
                }
                if (run === 0){
                    return "NONE_RUN";
                }
                if (passed > 0){
                    if (run === passed){
                        if (run === total){
                            return "ALL_RUN_ALL_PASSING";
                        }
                        return "SOME_RUN_ALL_PASSING";
                    }
                    if (run === total){
                        return "ALL_RUN_SOME_NOT_PASSING";
                    }
                    return "SOME_RUN_SOME_NOT_PASSING";
                }

                if (run === total){
                    return "ALL_RUN_NONE_PASSING";
                }
                return "SOME_RUN_NONE_PASSING";
            }
        });
    }
});
Ext.override(Rally.ui.grid.TreeGrid, {
    _mergeColumnConfigs: function(newColumns, oldColumns) {

        var mergedColumns = _.map(newColumns, function(newColumn) {
            var oldColumn = _.find(oldColumns, {dataIndex: this._getDataIndex(newColumn)});
            if (oldColumn) {
                return this._getColumnConfigFromColumn(oldColumn);
            }

            return newColumn;
        }, this);

        mergedColumns = mergedColumns.concat(this.config.derivedColumns);
        return mergedColumns;
    }
});

Ext.define('Rally.ui.renderer.template.testcasestatus.PercentDone', {
    requires: [
        'Rally.util.HealthColorCalculator'
    ],
    extend: 'Rally.ui.renderer.template.progressbar.ProgressBarTemplate',

    config: {
        calculateColorFn: function(recordData) {
            return '#7CAFD7';
        },
        isClickable: true
    },

    constructor: function(config) {
        this.initConfig(config);
        return this.callParent(arguments);
    }
});

Ext.override(Rally.ui.renderer.RendererFactory,{

    fieldTemplates: {
        _testcasestatus: function(){
            return Ext.create('Rally.ui.renderer.template.StringTemplate', {
                fieldName: '_testCaseStatus',
                titleCase: true,
                toSpace: ['_']
            });
        },
        _actualtestcases: function(){
            return Ext.create('Ext.XTemplate', '{[this.getPercent(values)]}', {
                getPercent: function(record) {
                    v = record._actualTestCases;
                    if (v !== null && !isNaN(Number(v))){
                        return Math.round(v * 100) + '%';
                    }
                    return v || '--';
                }
            });
        },
        _passrate: function(){
            return Ext.create('Ext.XTemplate', '{[this.getPercent(values)]}', {
                getPercent: function(record) {
                    v = record._passRate;
                    if (v !== null && !isNaN(Number(v))){
                        return Math.round(v * 100) + '%';
                    }
                    return v || '--';
                }
            });
        },
        _plannedtestcases: function(){
            return Ext.create('Ext.XTemplate', '{[this.getPercent(values)]}', {
                getPercent: function(record) {
                    v = record._plannedTestCases;
                    if (v !== null && !isNaN(Number(v))){
                        return Math.round(v * 100) + '%';
                    }
                    return v || '--';
                }
            });
        },
        attributetype: function() {
            return Ext.create('Rally.ui.renderer.template.AttributeTypeTemplate');
        },

        blocked: function() {
            return Ext.create('Rally.ui.renderer.template.BlockedTemplate');
        },

        defects: function() {
            return Ext.create('Rally.ui.renderer.template.status.DefectStatusTemplate');
        },

        defectstatus: function() {
            return toTitleCaseFn('DefectStatus');
        },

        disabled: function() {
            return Ext.create('Rally.ui.renderer.template.BooleanTemplate', {
                fieldName: 'Disabled',
                alt: 'Disabled'
            });
        },

        discussion: function() {
            return Ext.create('Rally.ui.renderer.template.status.DiscussionStatusTemplate');
        },

        displaycolor: function() {
            return Ext.create('Rally.ui.renderer.template.DisplayColorTemplate');
        },

        formattedid: function(field, config) {
            return Ext.create('Rally.ui.renderer.template.FormattedIDTemplate', config);
        },

        hidden: function(field) {
            return Ext.create('Rally.ui.renderer.template.BooleanTemplate', {
                fieldName: 'Hidden',
                showCheckWhenTrue: false
            });
        },

        parent: function() {
            return Ext.create('Rally.ui.renderer.template.ParentTemplate');
        },

        percentdonebystorycount: function() {
            return Ext.create('Rally.ui.renderer.template.progressbar.PercentDoneByStoryCountTemplate');
        },

        percentdonebystoryplanestimate: function() {
            return Ext.create('Rally.ui.renderer.template.progressbar.PercentDoneByStoryPlanEstimateTemplate');
        },

        predecessorsandsuccessors: function() {
            return Ext.create('Rally.ui.renderer.template.status.PredecessorsAndSuccessorsStatusTemplate');
        },

        rank: function(field) {
            return Ext.create('Rally.ui.renderer.template.DecimalTemplate', {
                fieldName: field.name
            });
        },

        requirement: function(field) {
            return Ext.create('Rally.ui.renderer.template.ChildObjectFormattedIDTemplate', {
                childObjectProperty: 'Requirement',
                showName: true
            });
        },

        schedulestate: function(field){
            return Ext.create('Rally.ui.renderer.template.ScheduleStateTemplate', {
                field: field,
                showTrigger: true
            });
        },

        statechangeddate: function() {
            return Ext.create('Rally.ui.renderer.template.DaysInThisColumnTemplate');
        },

        tags: function() {
            return Ext.create('Rally.ui.renderer.template.PillTemplate', { collectionName: 'Tags', cls: 'rui-tag-list-item'});
        },

        milestones: function() {
            return Ext.create('Rally.ui.renderer.template.PillTemplate', { collectionName: 'Milestones', iconCls: 'icon-milestone', cls: 'milestone-pill'});
        },

        //TODO: Remove TaskActualTotalTemplate once backend supports TaskActualTotal on TestSet. DE23100
        taskactualtotal: function(){
            return Ext.create('Rally.ui.renderer.template.TaskActualTotalTemplate');
        },

        tasks: function() {
            return Ext.create('Rally.ui.renderer.template.status.TaskStatusTemplate');
        },

        taskstatus: function() {
            return toTitleCaseFn('TaskStatus');
        },

        testcase: function(field) {
            return Ext.create('Rally.ui.renderer.template.ChildObjectFormattedIDTemplate', {
                childObjectProperty: 'TestCase',
                showName: true
            });
        },

        testcases: function() {
            return Ext.create('Rally.ui.renderer.template.status.TestCaseStatusTemplate');
        },

        testcasestatus: function() {
            return toTitleCaseFn('TestCaseStatus');
        },

        testfolder: function(field) {
            return Ext.create('Rally.ui.renderer.template.ChildObjectFormattedIDTemplate', {
                childObjectProperty: 'TestFolder',
                showName: true
            });
        },

        visibilityonchildprojects: function(field) {
            return Ext.create('Rally.ui.renderer.template.VisibilityOnSubprojectsTemplate');
        },

        workproduct: function() {
            return Ext.create('Rally.ui.renderer.template.ChildObjectFormattedIDTemplate', {
                childObjectProperty: 'WorkProduct',
                showName: true
            });
        },

        targetproject: function () {
            return Ext.create('Ext.XTemplate', '{[this.getProjectName(values)]}', {
                getProjectName: function(record) {
                    return Rally.ui.MilestoneTargetProjectPermissionsHelper.getProjectName(record);
                }
            });
        }
    }

});

Ext.override(Ext.util.Filter,{
    createFilterFn: function() {
        var me       = this,
            matcher  = me.createValueMatcher(),
            property = !Ext.isArray(me.property) ? me.property.split(',') : me.property

        return function(item) {
            var hasmatch = false;
            for(var i=0;i<property.length;i++) {
                if(matcher.test(me.getRoot.call(me, item)[property[i]])) {
                    hasmatch=true;
                    break;
                }
            }
            return matcher === null ? value === null : hasmatch;
        };
    }
});


Ext.override(Rally.ui.combobox.ComboBox, {

    doLocalQuery: function(queryPlan) {
        var me = this,
            queryString = queryPlan.query;

        // Create our filter when first needed
        if (!me.queryFilter) {
            // Create the filter that we will use during typing to filter the Store
            me.queryFilter = new Ext.util.Filter({
                id: me.id + '-query-filter',
                anyMatch: true,
                caseSensitive: false,
                root: 'data',
                property: me.filterProperties
            });
            me.store.addFilter(me.queryFilter, true);
        }

        // Querying by a string...
        if (queryString || !queryPlan.forceAll) {
            me.queryFilter.disabled = false;
            me.queryFilter.setValue(me.enableRegEx ? new RegExp(queryString) : queryString);
        }

        // If forceAll being used, or no query string, disable the filter
        else {
            me.queryFilter.disabled = true;
        }

        // Filter the Store according to the updated filter
        me.store.filter();

        // Expand after adjusting the filter unless there are no matches
        if (me.store.getCount()) {
            me.expand();
        } else {
            me.collapse();
        }

        me.afterQuery(queryPlan);
    }
});

Ext.define('Rally.technicalservices.Toolbox',{
    singleton: true,
    fetchWsapiRecords: function(config){
        var deferred = Ext.create('Deft.Deferred');

        Ext.create('Rally.data.wsapi.Store', config).load({
            callback: function(records, operation, success){
                if (success){
                    deferred.resolve(records);
                } else {
                    deferred.reject(Ext.String.format("Error getting {0}: {1}",config.model, operation.error.errors.join(',')));
                }
            }
        });
        return deferred;
    },
    fetchPortfolioItemTypes: function(){
        var deferred = Ext.create('Deft.Deferred'),
            store = Ext.create('Rally.data.wsapi.Store', {
                model: 'TypeDefinition',
                fetch: ['TypePath', 'Ordinal','Name'],
                filters: [
                    {
                        property: 'Parent.Name',
                        operator: '=',
                        value: 'Portfolio Item'
                    },
                    {
                        property: 'Creatable',
                        operator: '=',
                        value: 'true'
                    }
                ],
                sorters: [{
                    property: 'Ordinal',
                    direction: 'ASC'
                }]
            });

        store.load({
            callback: function(records, operation, success){
                if (success){
                    var portfolioItemTypes = new Array(records.length);
                    _.each(records, function(d){
                        //Use ordinal to make sure the lowest level portfolio item type is the first in the array.
                        var idx = Number(d.get('Ordinal'));
                        portfolioItemTypes[idx] = d.getData();
                    });
                    deferred.resolve(portfolioItemTypes);
                } else {
                    var error_msg = '';
                    if (operation && operation.error && operation.error.errors){
                        error_msg = operation.error.errors.join(',');
                    }
                    deferred.reject('Error loading Portfolio Item Types:  ' + error_msg);
                }
            }
        });
        return deferred.promise;
    }
});
Ext.define("test-status-by-portfolio-item", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },
    config: {
        defaultSettings: {
            selectPortfolioType: 'PortfolioItem/Theme',
            commentsField: 'Notes'
        }
    },
    items: [
        {xtype:'container',itemId:'message_box',tpl:'Hello, <tpl>{_refObjectName}</tpl>'},
        {xtype:'container',itemId:'display_box'}
    ],

    integrationHeaders : {
        name : "test-status-by-portfolio-item"
    },

    featureFetch: ['ObjectID','FormattedID','Name','PlannedStartDate','PlannedEndDate','ActualStartDate','ActualEndDate','Parent'],
    testCaseFetch: ['ObjectID','FormattedID','WorkProduct','Type','LastVerdict','LastRun'],

    launch: function() {
        Rally.technicalservices.Toolbox.fetchPortfolioItemTypes().then({
            success: function(portfolioItemTypes){
                this.portfolioItemTypes = portfolioItemTypes;
                this._addSelector();
            },
            failure: function(msg){
                this._showError(msg);
            },
            scope: this
        });
    },
    _addSelector: function(){
        var portfolioItemType = this.getSetting('selectPortfolioType');

        this.removeAll();

        var cb = Ext.create('Rally.ui.combobox.ComboBox',{
            storeConfig: {
                model: portfolioItemType,
                fetch: ['FormattedID','ObjectID','Name'],
                remoteFilter: false,
                autoLoad: true
            },
            fieldLabel: 'Portfolio Item',
            itemId: 'cb-portfolio-item',
            margin: 10,
            valueField: 'ObjectID',
            displayField: 'FormattedID',
            width: 400,
            listConfig: {
                itemTpl: '{FormattedID}: {Name}'
            },
            filterProperties: ['Name','FormattedID'],
            fieldCls: 'pi-selector',
            displayTpl: '<tpl for=".">' +
            '{[values["FormattedID"]]}: {[values["Name"]]}' +
            '<tpl if="xindex < xcount">,</tpl>' +
            '</tpl>'
        });
        this.add(cb);

        cb.on('change', this._fetchGridboardData, this);
    },
    _showError: function(msg){
        Rally.ui.notify.Notifier.showError({message: msg});
    },
    _fetchGridboardData: function(cb){
        var portfolioItem = cb.getRecord(),
            featureConfig = this._getFeatureConfig(portfolioItem),
            me = this;

        this.logger.log('_fetchGridboardData',featureConfig, featureConfig.filters.toString(), portfolioItem);

        if (this.down('rallygridboard')){
            this.down('rallygridboard').destroy();
        }

        Ext.create('Rally.data.wsapi.TreeStoreBuilder').build({
            models: featureConfig.models,
            enableHierarchy: true,
            autoLoad: true,
            filters: featureConfig.filters,
            fetch: this.featureFetch
        }).then({
            success: function(store) { this._addGridboard(store, featureConfig); },
            failure: function(msg){
                me._showError(msg);
            },
            scope: me
        });
    },
    _addGridboard: function (store, featureConfig) {

        Rally.technicalservices.ModelExtender.build(store.model);
        _.each(store.models, Rally.technicalservices.ModelExtender.build);

        store.on('load', this._fetchUserStories, this);
        this.logger.log('_addGridboard',featureConfig);
        this.add({
            xtype: 'rallygridboard',
            modelNames: featureConfig.models,
            context: this.getContext(),
            plugins: [{
                ptype: 'rallygridboardfieldpicker',
                headerPosition: 'right',
                modelNames: store.models,
                stateful: true,
                stateId: 'test-status-columns-10'
            }],
            toggleState: 'grid',
            stateful: true,
            stateId: 'test-status-gridboard-10',
            gridConfig: {
                store: store,
                storeConfig: {
                    filters: featureConfig.filters
                },
                columnCfgs: this._getColumnCfgs(),
                derivedColumns: this._getDerivedColumns()
            },
            height: this.getHeight()
        });
    },
    _fetchData: function(cb){
        var portfolioItem = cb.getRecord(),
            featureConfig = this._getFeatureConfig(portfolioItem);

        Rally.technicalservices.Toolbox.fetchWsapiRecords(featureConfig).then({
            success: function(records){
                this.logger.log('fetchWsapiRecords', records);
                this._fetchUserStories(records);
            },
            failure: function(msg){
                this._showError(msg);
            },
            scope: this
        });

    },
    _fetchUserStories: function(store, node, records){
        this.logger.log('_fetchUserStories', store, node, records);

        if (node.parentNode){

            if (records && records.length > 0 && records[0].get('_type').toLowerCase().match(/^portfolioitem/)){
                this._processCalculatedFields(records);
            }
            return;
        }

        var configs = this._getStoryConfigs(records),
            promises = _.map(configs, function(config) { return Rally.technicalservices.Toolbox.fetchWsapiRecords(config); });

        Deft.Promise.all(promises).then({
            success: function(results){
                this.logger.log('_fetchUserStories', configs, results);
                var userStories = _.flatten(results);
                this._fetchTestCases(records, userStories);
            },
            failure: function(msg){
                this._showError(msg);
            },
            scope: this
        });

    },
    _fetchTestCases: function(features, userStories){
        var configs = this._getTestCaseConfigs(userStories),
            promises = _.map(configs, function(config) { return Rally.technicalservices.Toolbox.fetchWsapiRecords(config); });

        Deft.Promise.all(promises).then({
            success: function(results){
                this.logger.log('_fetchTestCases', configs, results);
                var testCases = _.flatten(results);
                this.testCasesByAncestor = this._getTestCasesByAncestors(userStories, testCases);
                this._processCalculatedFields(features);
               // var store = this._buildCustomStore(features, userStories, _.flatten(results));
                //this._displayGrid(store);
            },
            failure: function(msg){
                this._showError(msg);
            },
            scope: this
        });
    },
    _processCalculatedFields: function(records){
        this.logger.log('_processCalculatedFields', records);

        _.each(records, function(r){
            r.calculate(this.testCasesByAncestor[r.get('ObjectID')] || []);
        }, this);
    },
    _buildCustomStore: function(portfolioItems, userStories, testCases){
        this.logger.log('_buildCustomStore', portfolioItems, userStories, testCases);
        var testCasesByPortfolioItem = this._getTestCasesByPortfolioItem(userStories, testCases);
        this.logger.log('_buildCustomStore', testCasesByPortfolioItem);

        var data = [];
        _.each(portfolioItems, function(p){
            var row = Ext.create('Rally.technicalservices.PortfolioTestStatusRow',{
                portfolioItem: p,
                testCases: testCasesByPortfolioItem[p.get('ObjectID')] || []
            });
            data.push(row.getDataRow());
        });

        var fields = _.keys(data[0]);
        return Ext.create('Rally.data.custom.Store',{
            data: data,
            fields: fields
        });
    },
    _getTestCasesByAncestors: function(stories, testCases){

        var testCasesByAncestorOid = _.reduce(testCases, function(sHash, tc){
            var sid = tc.get('WorkProduct') && tc.get('WorkProduct').ObjectID || null;
            if (sid){
                if (!sHash[sid]){
                    sHash[sid] = [];
                }
                sHash[sid].push(tc);
            }
            return sHash;
        },{});

        var h = {};
        _.each(stories, function(s){
            var feature = s.get('Feature') && s.get('Feature').ObjectID || null,
                sid = s.get('ObjectID');
            if (feature && testCasesByAncestorOid[sid]){
                var featureParent = s.get('Feature') && s.get('Feature').Parent && s.get('Feature').Parent.ObjectID;
                if (!testCasesByAncestorOid[feature]){
                    testCasesByAncestorOid[feature] = [];
                }
                if (featureParent && !testCasesByAncestorOid[featureParent]){
                    testCasesByAncestorOid[featureParent] = [];
                }
                testCasesByAncestorOid[feature] = testCasesByAncestorOid[feature].concat(testCasesByAncestorOid[sid]);
                if (featureParent) { testCasesByAncestorOid[featureParent] = testCasesByAncestorOid[featureParent].concat(testCasesByAncestorOid[sid]); }
            }
        });

        this.logger.log('_buildCustomStore', testCasesByAncestorOid);
        return testCasesByAncestorOid;
    },
    _getPortfolioItemLevel: function(portfolioItem){
        var idx = -1,
            type = portfolioItem.get('_type').toLowerCase();

        for (var i=0; i<this.portfolioItemTypes.length; i++){
            if (type === this.portfolioItemTypes[i].TypePath.toLowerCase()){
                idx = i;
                i = this.portfolioItemTypes.length;
            }
        }
        return idx;
    },
    _getFeatureConfig: function(portfolioItem){
        var idx = this._getPortfolioItemLevel(portfolioItem);

        var model = this.portfolioItemTypes[0].TypePath.toLowerCase(),
            filterProperty = "ObjectID";
        if (idx > 0) {
            model = this.portfolioItemTypes[idx-1].TypePath.toLowerCase();
            filterProperty = "Parent.ObjectID"
        }

        var filters = Ext.create('Rally.data.wsapi.Filter',{
            property: filterProperty,
            value: portfolioItem.get('ObjectID')
        }),
            commentsField = this.getSetting('commentsField'),
            fetch = this.featureFetch.concat([commentsField]);

        this.logger.log('_getFeatureConfig',fetch, model, idx, filterProperty, filters);
        return {
            autoLoad: true,
            models: [model],
            enableHierarchy: true,
            fetch: fetch,
            filters: filters,
            limit: 'Infinity'
        };
    },
    _getFeatureFieldName: function(){
        this.logger.log('_getFeatureFieldName',this.portfolioItemTypes[0].TypePath,this.portfolioItemTypes[0].TypePath.replace("PortfolioItem/",""));
        return this.portfolioItemTypes[0].TypePath.replace("PortfolioItem/","");
    },
    _getStoryConfigs: function(portfolioItemRecords){
        this.logger.log('_getStoryConfigs', portfolioItemRecords);
        var idx = portfolioItemRecords.length > 0 ? this._getPortfolioItemLevel(portfolioItemRecords[0]) : 0,
            featureName = this._getFeatureFieldName(),
            fetch = ['ObjectID','TestCaseStatus','Parent'].concat([featureName]),
            propertyFilter = [featureName];

        for (var i=0; i<idx; i++){ propertyFilter.push('Parent'); }
        propertyFilter.push('ObjectID');
        propertyFilter = propertyFilter.join('.');

        var filters = _.map(portfolioItemRecords, function(r){ return {property: propertyFilter, value: r.get('ObjectID')};});
        if (portfolioItemRecords.length === 0){
            filters = [{ property: 'ObjectID', value: 0}];
        }

        filters = Rally.data.wsapi.Filter.or(filters);

        filters = filters.and({
            property: 'TestCaseStatus',
            operator: '!=',
            value: ""
        });

        this.logger.log('_getStoryConfig', featureName, fetch, filters.toString());
        return [{
            model: 'HierarchicalRequirement',
            fetch: fetch,
            filters: filters,
            limit: 'Infinity'
        }];
    },
    _getTestCaseConfigs: function(storyRecords){
        var fetch = this.testCaseFetch,
            filters = _.map(storyRecords, function(r){ return {property: "WorkProduct.ObjectID", value: r.get('ObjectID')};});
        this.logger.log('_getTestCaseConfigs', storyRecords, filters);
        if (filters.length === 0){
            filters = [{ property: 'ObjectID', value: 0}];
        }
        filters = Rally.data.wsapi.Filter.or(filters);

        this.logger.log('_getTestCaseConfigs', fetch, filters.toString())

        return [{
            model: 'TestCase',
            fetch: fetch,
            filters: filters,
            limit: 'Infinity'
        }];
    },
    _displayGrid: function(store){
        if (this.down('rallygrid')){
            this.down('rallygrid').destroy();
        }

        this.add({
            xtype: 'rallygrid',
            store: store,
            columnCfgs: this._getColumnCfgs()
        });
    },
    _getDerivedColumns: function(){
        var commentField = this.getSetting('commentsField')

        return [{
            dataIndex: '_totalTestCases',
            text: 'Total'
        },{
            dataIndex: '_actualTestCases',
            text: 'Actual'
        },{
            dataIndex: '_plannedTestCases',
            text: 'Planned'
        },{
            dataIndex: '_passRate',
            text: 'Passed'
        }, {
            dataIndex: '_testCaseStatus',
            text: 'Status',
        },{
            dataIndex: commentField,
            text: 'Comments',
            flex: 1
        }];
    },
    _getColumnCfgs: function(){
        this.logger.log('_getColumnCfgs');

        var fields = [{
            dataIndex: 'Name',
            text: 'Name',
            flex: 1
        },{
            dataIndex: 'PlannedEndDate',
            text: 'Planned End Date'
        }];

        fields = fields.concat(this._getDerivedColumns());

        return fields;
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    getSettingsFields: function(settings){

        var filters = [{
            property: 'TypePath',
            operator: 'contains',
            value: 'PortfolioItem/'
        }];

        return [{
            name: 'selectPortfolioType',
            xtype: 'rallycombobox',
            allowBlank: false,
            autoSelect: false,
            shouldRespondToScopeChange: true,
            fieldLabel: 'Portfolio Selector Type',
            labelAlign: 'right',
            labelWidth: 150,
            context: this.getContext(),
            storeConfig: {
                model: Ext.identityFn('TypeDefinition'),
                sorters: [{ property: 'DisplayName' }],
                fetch: ['DisplayName', 'ElementName', 'TypePath', 'Parent', 'UserListable'],
                filters: filters,
                autoLoad: false,
                remoteSort: false,
                remoteFilter: true
            },
            displayField: 'DisplayName',
            valueField: 'TypePath',
            readyEvent: 'ready'
        },{
            name: 'commentsField',
            xtype: 'rallyfieldcombobox',
            labelAlign: 'right',
            labelWidth: 150,
            allowBlank: false,
            fieldLabel: 'Field',
            context: this.getContext(),
            model: 'Portfolioitem'
        }];
    },
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        this._addSelector();
    }
});

            
               Rally.launchApp('test-status-by-portfolio-item', {
                   name: 'Test Status by Portfolio Item'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>